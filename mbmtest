#!/usr/bin/perl
#
# mbmtest
#
# Perl-Programm zum Testen von MBMan.pm.

# DEBUGGING
use strict;
use warnings;
use diagnostics;

# PREREQUISITES
use sigtrap qw/handler signal_handler normal-signals/;
use feature 'say';
use Getopt::Std;
use Pod::Usage;
use Data::Dumper;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Terse    = 1;
$Data::Dumper::Indent   = 1;

# OWN
use lib '.';
use MBMan;

#

my %messages = (

    need_command => 'mbman.pl erwartet einen Befehl. Hilfe über "mbman.pl -h"!',
    need_args    => 'mbman.pl erwartet Argumente. Hilfe über "mbman.pl -h"!',
    saved        => 'Nachricht wurde erfolgreich gespeichert'

);

# Argumente
our $opt_S = '';    # server name
our $opt_U = '';    # user
our $opt_P = '';    # password
our $opt_I = '';    # uid
our $opt_M = '';    # mailbox name
our $opt_L = '';    # limit in percent

# Optionen
our $opt_V = 0;     # verbose
our $opt_E = 0;     # expunge?
our $opt_A = 0;     # autosave?
our $opt_F = 0;     # message file validity test?

# Befehle
our $opt_h = 0;     # help
our $opt_c = 0;     # connect
our $opt_l = 0;     # login
our $opt_f = 0;     # get mailbox list (folder)
our $opt_q = 0;     # get quota/usage
our $opt_i = 0;     # get info
our $opt_m = 0;     # get message
our $opt_a = 0;     # autolimit

our $mbman = undef;

exit &main();       # Hauptprogramm

sub main {

    if (@ARGV) {

        getopts('S:U:P:I:M:L:VEAFhclfqima');

        if ($opt_h) {

            pod2usage(

                -verbose    => 2,
                -perldocopt => "-T"

            );

            return 1

        }

        $mbman = MBMan->new( Debug => $opt_V );

        if ( $opt_c and $opt_S ) {

            $mbman->connect(

                Server => $opt_S

            );

        }

        if ( $opt_l and $opt_U and $opt_P ) {

            $mbman->login(

                User     => $opt_U,
                Password => $opt_P

            );

        }

        if ($opt_f) {

            print Dumper $mbman->mailboxes();

        }

        if ($opt_q) {

            print Dumper $mbman->quota();

        }

        if ($opt_m) {

            my $data = $mbman->message(

                Expunge => $opt_E,
                Save    => $opt_A,
                Mailbox => $opt_M,
                Uid     => $opt_I

            );

            print Dumper $data->{INFO};

        }

        if ($opt_i) {

            print Dumper $mbman->vars();

        }

        if ($opt_a) {

            my $limitlist = $mbman->limitlist(

                Limit => $opt_L

            );

            for ( @{$limitlist} ) {

                my $message = $mbman->message(

                    Uid     => $_,
                    Filechk => $opt_F,
                    Expunge => $opt_E,
                    Save    => $opt_A

                );

                print Dumper $message->{INFO};

            }

        }

        $mbman->logout();

    }

    else {

        say $messages{need_command};

    }

    return 0;

}

sub signal_handler {

    die "Benutzerdefinierte Unterbrechung! Signal: $!\n";

}

END {

    if ( $mbman->{Imap}->IsConnected() ) {

        warn "Die Verbindung zum IMAP-Server wird kontrolliert beendet!\n";

        if ( $mbman->logout() ) {

            warn "DONE!\n";

        }
        else {

            warn "FAILED!\n";

        }

    }

}

__END__

=encoding UTF-8

=head1 NAME
 
B<mbmtest>

=head1 FUNKTION

Perl-Programm zum Testen von MBMan.pm.

=head1 ANWENDUNG
 
mbmtest [Option+][Befehl+]

=head1 OPTIONEN

=over
 
=item B<-h>
 
Zeige die Hilfeseite an und beende das Programm.

=item B<-v>

Das Programm gibt zusätzliche Informationen aus (verbose).

=item B<-S Server[:Port]>

Hostadresse und Port eines IMAP4S-Servers. Standardport = 993.

=item B<-U Username>

Der für den IMAP-Login zu verwendende Nutzername
(Email-Hoster bedienen sich meißt folgenden Schemas: 'foo@bar.tld').

=item B<-P Passwort>

Das für den IMAP-Login zu verwendende Passwort.

=back

=head1 BEFEHLE

=over

=item B<-c>

Das 'c' steht für 'connect'; Verbinde zum IMAP-Server. Der Verbindungsstatus nach diesem Befehl lautet 'not authenticated'.

=back 

=cut
